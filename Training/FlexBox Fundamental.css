/*1. Using flex-direction to layout content horizontally and vertically */
.flex_direction {
    display: flex;
    flex-direction: column;
    /* row-reverse, column, column-reverse */
}



/* ---------------------------------------------------------------------------- */



/*2. Using order to rearrange flexbox children */

.flex_children_order {
    /* make a flex container and its children flex */
    display: flex;
}

.flex_item {
    padding: 10px;
    border: solid;
    margin: 5px;
}

/* Rearrange using the order property */
.flex_item:nth-child(1) {
    order: 2;
}

.flex_item:nth-child(2) {
    order: 1;
}

.flex_item:nth-child(3) {
    order: 3;
}




/* ---------------------------------------------------------------------------- */




/* 3. Demystifying alignment in flexbox children */

/* Aligns items in the center  */
.flex_children_order2 {
    display: flex;
    justify-content: center;
}

/*  common values: flex-start, flex-end, center, space-between, space-around, space-evenly. */

/* Aligns items in the center vertically */
/* .flex_children_order2 {
    display: flex;
    align-items: center;
    
} */

/* Aligns this item differently  */
/* .flex_item2 {
    align-self: baseline;
    
}  */









/* ---------------------------------------------------------------------------- */




/* 4. Defining dimensions on flexbox children using flex-basis */

.flex_container1 {
    display: flex;
}

.flex_item1 {
    flex-basis: 100px;
    border: 1px solid black;
    padding: 10px;
    margin: 10px;
}



/* ---------------------------------------------------------------------------- */




/* 5. Using flex-shrink and flex-grow to make flexbox children resize correctly */
.flex_grow_shrink {
    display: flex;
    background-color: lightgrey;
    padding: 10px;
}

.flex_item2 {
    flex-basis: 100px;
    padding: 10px;
    margin: 5px;
    border: 1px solid black;
    background-color: white;
}

#item_grow {
    flex-grow: 1;
    flex-shrink: 0;
}

#item_unchange {
    flex-shrink: 0;
}

#item_shrink {
    /* flex-shrink: 1; this value is set at default, even without having to declare shrink: 1*/

}


/* ---------------------------------------------------------------------------- */




/* 6. Combining the flexbox sizing properties using the flex shorthand */

.flexbox_combine {
    display: flex;
    background-color: lightgrey;
    padding: 10px;
}

.flex_item3 {
    flex-basis: 100px;
    padding: 10px;
    margin: 5px;
    border: 1px solid black;
    background-color: white;
}

#item_grow1 {
    flex-grow: 1;
    flex-shrink: 0;
}

#item_basis {
    flex-shrink: 0;
    flex-basis: 200px;
}

#item_shrink1 {
    /* flex-shrink: 1; this value is set at default, even without having to declare shrink: 1*/

}

/* ---------------------------------------------------------------------------- */




/* 7. Turning a flexbox into a grid using flex-wrap and align-content */

.flexbox_wrap {
    max-width: 1200px;
    margin: 0 auto;
    gap: 10px;
    text-align: center;
}

.row {
    display: flex;
    gap: 10px;
    margin-bottom: 10px;
}

.column {
    flex: 1;
    background-color: lightgray;
    padding: 10px;


}

.column_two_third {
    flex: 2;
    background-color: lightgray;
    padding: 10px;
}

@media only screen and (max-width: 768px) {
    .row {
        flex-wrap: wrap;
    }

    .column {
        flex-basis: 100%;
    }
}



/* ---------------------------------------------------------------------------- */





/* 8. Using Flexbox in Websites and Applications */